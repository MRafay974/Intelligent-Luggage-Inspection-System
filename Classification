import numpy as np
from sklearn.utils import shuffle
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import tensorflow as tf
import ipyplot
import math
import os
from tensorflow.keras.models import *
from tensorflow.keras.layers import *
from tensorflow.keras.optimizers import *
from tensorflow.keras.losses import *
from tensorflow.keras.preprocessing.image import *
import numpy as np
import os
import cv2



# Define directory path
dir = "/content/drive/MyDrive/Dip_Project_Data/DIP Data Upload/binary_classification"
print(dir)
class_names = ['safe', 'threat']
# Count total number of images
num_images = sum(len(os.listdir(os.path.join(dir, class_dir))) for class_dir in class_names)
print(num_images)
# Define the class names
num_classes = 2 # Binary classification
# Initialize arrays for images and labels
images = np.zeros([num_images, 512, 512, 3], dtype=np.uint8)
labels = np.zeros([num_images, num_classes], dtype=np.uint8) # 2D labels for one-hot 
encoding
img_count = 0
# Iterate over subdirectories (classes)
for class_idx, class_name in enumerate(class_names):
 class_path = os.path.join(dir, class_name)
 image_files = os.listdir(class_path)
 for img_file in image_files:
 if img_count >= num_images:
 break
 img_path = os.path.join(class_path, img_file)
 img = cv2.imread(img_path, cv2.IMREAD_COLOR)
 if img is None:
 continue # Skip if the image is not readable
 img = cv2.resize(img, (512, 512))
 # Assign the one-hot encoded label
 labels[img_count, class_idx] = 1 # class_idx will be 0 for 'safe' and 1 for 'threat'
 images[img_count, ...] = img
 img_count += 1
# Save the arrays as .npy files
np.save("Train_images.npy", images)
np.save("Train_labels.npy", labels)




training_img_path = '/content/Train_images.npy'
training_label_path = '/content/Train_labels.npy'
testing_img_path = '/content/Test_images.npy'
testing_label_path = '/content/Test_labels.npy'
train_img, train_label = np.load(training_img_path), np.load(training_label_path)
test_img, test_label = np.load(testing_img_path), np.load(testing_label_path)
print(" Training Shape :", train_img.shape, train_label.shape)
print(" Testing Shape :", test_img.shape, test_label.shape)





classes = 2
# creating model
inputs = Input((512, 512, 3))
conv1 = Conv2D(8, 3, activation='relu', padding='same')(inputs)
conv1 = BatchNormalization()(conv1)
pool1 = MaxPooling2D(pool_size=(2,2))(conv1)
conv2 = Conv2D(16, 3, activation='relu', padding='same')(pool1)
conv2 = BatchNormalization()(conv2)
pool2 = MaxPooling2D(pool_size=(2,2))(conv2)
conv3 = Conv2D(32, 3, activation='relu', padding='same')(pool2)
conv3 = BatchNormalization()(conv3)
pool3 = MaxPooling2D(pool_size=(2,2))(conv3)
conv4 = Conv2D(64, 3, activation='relu', padding='same')(pool3)
conv4 = BatchNormalization()(conv4)
pool4 = MaxPooling2D(pool_size=(2,2))(conv4)
conv5 = Conv2D(128, 3, activation='relu', padding='same')(pool4)
conv5 = BatchNormalization()(conv5)
drop5 = Dropout(0.25)(conv5)
x = Flatten()(drop5)
x = Dense(128, activation='relu', name='Dense_1', dtype='float32')(x)
x = Dense(64, activation='relu', name='Dense_2', dtype='float32')(x)
x = Dense(8, activation='relu', name='Dense_3', dtype='float32')(x)
x = Dense(classes, activation='sigmoid', name='Output', dtype='float32')(x)
my_model = Model(inputs=[inputs], outputs=[x])
my_optimizer = Adam(lr=0.00001)
my_model.compile(loss='binary_crossentropy', 
optimizer=my_optimizer,metrics=['categorical_accuracy'])
my_model.summary()




my_model_ = my_model.fit(x=train_img, y=train_label,batch_size=60, epochs=20)
# Evaluate the model on the test data
test_loss, test_accuracy = my_model.evaluate(test_img, test_label, verbose=2)
print(f"Test Loss: {test_loss}")
print(f"Test Accuracy: {test_accuracy}")




# Define the class names
class_names = ['safe', 'threat']
predictions = my_model.predict(test_img)
# Convert one-hot encoded labels to class indices
true_classes = np.argmax(test_label, axis=1)
predicted_classes = np.argmax(predictions, axis=1)
# Create the confusion matrix
cm = confusion_matrix(true_classes, predicted_classes)
# Display the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_names)
disp.plot(cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.show()




# Save the model as an HDF5 file
model_path_h5 = '/content/drive/MyDrive/Model-Classification/my_model.h5'
my_model.save(model_path_h5)
